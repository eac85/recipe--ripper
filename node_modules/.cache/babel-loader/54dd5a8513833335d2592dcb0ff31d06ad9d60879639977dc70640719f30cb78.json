{"ast":null,"code":"var _jsxFileName = \"/Users/emery/Desktop/recipe-ripper-app/src/RecipeRipper.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from \"./Button\";\nimport './css/fonts.css';\nimport './css/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecipeRipper() {\n  _s();\n  const [count, setCount] = useState(0);\n  const [isPressed, setIsPressed] = useState(false);\n  const handleButtonClick = () => {\n    this.props.setIsPressed(true);\n    alert(this.props.name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"RECIPE RIPPER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      id: \"page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          paddingTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"start\",\n          name: \"start\",\n          action: handleButtonClick,\n          isPressed: isPressed,\n          setIsPressed: setIsPressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"next\",\n          name: \"next\",\n          action: handleButtonClick,\n          isPressed: isPressed,\n          setIsPressed: setIsPressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Button is \", isPressed ? 'pressed' : 'not pressed']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(RecipeRipper, \"ah86lPSIqXEwVsbiwtq4nedwwH0=\");\n_c = RecipeRipper;\nexport default RecipeRipper;\nvar _c;\n$RefreshReg$(_c, \"RecipeRipper\");","map":{"version":3,"names":["React","useState","Button","jsxDEV","_jsxDEV","RecipeRipper","_s","count","setCount","isPressed","setIsPressed","handleButtonClick","props","alert","name","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","id","paddingTop","text","action","_c","$RefreshReg$"],"sources":["/Users/emery/Desktop/recipe-ripper-app/src/RecipeRipper.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Button from \"./Button\";\nimport './css/fonts.css';\nimport './css/index.css';\n\nfunction RecipeRipper() {\n   const [count, setCount] = useState(0);\n   const [isPressed, setIsPressed] = useState(false);\n\n  const handleButtonClick = () => {\n    this.props.setIsPressed(true);\n    alert(this.props.name);\n  };\n\n  return (\n    <div>\n      <h1>RECIPE RIPPER</h1>\n      <div style={{ display: 'flex', justifyContent: 'center' }} id=\"page\">\n        <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '20px' }}>\n          <Button \n          text=\"start\" \n          name=\"start\"  \n          action={handleButtonClick} \n          isPressed={isPressed}\n          setIsPressed={setIsPressed} />\n\n          <Button \n          text=\"next\" \n          name=\"next\"  \n          action={handleButtonClick} \n          isPressed={isPressed}\n          setIsPressed={setIsPressed} />\n          <p>Button is {isPressed ? 'pressed' : 'not pressed'}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RecipeRipper;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,iBAAiB;AACxB,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAElD,MAAMU,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAACC,KAAK,CAACF,YAAY,CAAC,IAAI,CAAC;IAC7BG,KAAK,CAAC,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;EACxB,CAAC;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACtBf,OAAA;MAAKgB,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE;MAAS,CAAE;MAACC,EAAE,EAAC,MAAM;MAAAR,QAAA,eAClEX,OAAA;QAAKgB,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,QAAQ;UAAEE,UAAU,EAAE;QAAO,CAAE;QAAAT,QAAA,gBAC5EX,OAAA,CAACF,MAAM;UACPuB,IAAI,EAAC,OAAO;UACZX,IAAI,EAAC,OAAO;UACZY,MAAM,EAAEf,iBAAkB;UAC1BF,SAAS,EAAEA,SAAU;UACrBC,YAAY,EAAEA;QAAa;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eAE9Bf,OAAA,CAACF,MAAM;UACPuB,IAAI,EAAC,MAAM;UACXX,IAAI,EAAC,MAAM;UACXY,MAAM,EAAEf,iBAAkB;UAC1BF,SAAS,EAAEA,SAAU;UACrBC,YAAY,EAAEA;QAAa;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eAC9Bf,OAAA;UAAAW,QAAA,GAAG,YAAU,EAACN,SAAS,GAAG,SAAS,GAAG,aAAa;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACpD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACb,EAAA,CAhCQD,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAkCrB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}